ls| where {gt $size 5}
json some_file.json | select elapsed={add $setup_time $work_time teardown_time}
ls | sort {neg $size}

Integrating external commands:

Just pass thorugh commands that don't exist in the shell but exist in PATH

git grep fnurp

Stream editing:

# Convert file column in-place
ls | select * file={upper $file}

# Append new column named lower, containing a lower-case version of the column file
ls | select * lower={lower $file}

# Replace file column in-place using regex
ls | sed file= regex{a(b*)c(d*)e} replace{\1\2}

Modes:

regex{.*} # Regex
*{*.txt}  # Glob
{ls}      # Closure
(ls)      # Command substitution

json deserialization:
How to deal with impedance mismatch, e.g. null values, lists with multiple types of values, etc?

let foo=material{ls}

text library:

Commands for transforming text fields, e.g.:
text.lower
text.upper
text.lpad
text.rpad
text.trim
text.truncate
text.format

file library:

if (file.stat foo.txt)[is_directory] {val yay} else {val nay}

