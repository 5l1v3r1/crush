Aggregating streams:

find . | group ^size | aggr group={count}
find . | group ^user | aggr group={sum ^size}

Graphs:

Graphs consist of two data types: nodes and edges.

Crush nodes are simply rows in normal tables.

Crush edges are a new type that connect two table rows to each others. Every
edge contains two index references. Edges can be directed or undirected.
Edges can point to the same row or other rows in the same table, but allowing
them to point to rows in other tables would lead to reference cycles and memory
leaks. One-to-one relationships are simply edge fields. One-to-many, and many-to-many
relationships are modeled using fields of lists.

# Find leaf nodes
crush> ps | where { (children:len) == 0 }

A new operator, '::', is used to access a member in each element of a list.

# Find processes who are running as a different user than their parent
ps | where { parent::user != global:user:me:name }

When using '::' on a list/set of edges, it fetches that member in each element in returns them in a new list.

In order to display a graph as a tree, simply return an edge as the root object, and the pretty-printer will
do the rest:

crush> (ps | where {pid == 1}):parent
...


grpc command:

# Create new grpc instance:
crush> srv := (grpc "localhost:443")
# List all services on a server
crush> dir srv
[my.service other.service]
# List all methods of a service
crush> dir srv:my.service
[method1 method2]
# Call method without parameters
srv:my.service:method1
["some" "output"]
# Call method with parameters
srv:my.service:method2 id=1234 tags=(list:of "foo" "bar")
["other" "output"]

Validation:
All commands declare valid input and output types.
Input types can be partial, e.g. any iterator or any iterator with some restrictions.
Checks are performed to validate consistency.
Syntax for not having to duplicate output type.

Commands:
A simple command for replacing a regex in every line of a file. Implement it in crush, using built in commands.
Show permissions in the find command.
The find command could accept a glob or file as an optional parameter for filtering.
Extra columns for ps: memory usage, tty, current CPU usage.
du-like command for showing disk usage hierachy.
A grep-command.
User namespace should be for *any* user, and user:me is the current user. There are also user:from_name and user:from_id methods.
words:from
split:from
chmod/chown equivalent
read equivalent

More pipelines:

Currently, accessing a field in a struct isn't a pipeline step, it's done via e.g.

(http "example.com"):body | json:from

When writing a pipeline, this doesn't always make the code flow naturally. There should be a pipeline-based
way to do the same in order to make the code flow more naturally, e.g.

http "example.com" | member ^body | json:from

http "example.com" | ^body | json:from

Such a syntax would be longer, but as noted, it would allow the code to flow more naturally in many cases.
