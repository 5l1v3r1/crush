Aggregating streams:

find . | group %size | aggr group={count}
find . | group %user | aggr group={sum %size}

Graph/Tree data:

Is there a nice way to represent and visualize graph data such as trees that makes sense for crush?
Could be useful for showing a tree view of processes (ps), file trees (find, du), etc.

* Should this be represented by a special type of tree-struct or just use regular structs with members of the same type? The latter can't represent cycles.
* What additional primitives are needed to efficiently manipulate tree data?

Smoothing out the rough edges:

* boolean flags supported using --foo, equivalent to foo=true
* External commands need to be adapted to not be annoying

Example invocations:
    git:status
    git:commit --a m="This is a commit message"
    git:add .

Writing libraries in crush:

Import command, etc.

Crush configuration:

* One idea would be the standard configuration-is-code thing with reading specific files during startup.
* Another idea would be to have a config variable that you can query and assign to at runtime,
  and that is responsible for sharing config in real time across instances.

Serialisation format

All materialized values have a unique ID
Serialisation procedure

First materialize the value.
Walk the tree of everything to be serialised, and put it into a HashMap<Id, Value>.

File format.

Protobuf based.

