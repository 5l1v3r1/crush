use std::str::FromStr;
use crate::lang::ast::*;

grammar;

pub JobList: JobListNode = {
    Separator? <l:JobListWithoutSeparator> => l,
};

JobListWithoutSeparator: JobListNode = {
    => JobListNode {jobs: vec![]},
    <j: NonEmptyJobList> Separator? => j,
};

NonEmptyJobList: JobListNode = {
    <mut l:NonEmptyJobList> Separator <j:Job> =>  {l.jobs.push(j); l},
    Job => JobListNode {jobs: vec![<>]},
};

Job: JobNode = {
    Command => JobNode{commands: vec![<>]},
    <mut j:Job> "|" Separator? <c:Command> => {j.commands.push(c); j}
};

Command: CommandNode = {
    Assignment => CommandNode{expressions: vec![*<>]},
    <mut c: Command> <a:Assignment> => {c.expressions.push(*a); c}
};

Assignment: Box<Node> = {
    Logical,
    <i: Item> "=" <e: Assignment> => Box::from(Node::Assignment(i, Box::from("="), e)),
    <i: Item> ":=" <e: Assignment> => Box::from(Node::Assignment(i, Box::from(":="), e)),
}

Logical: Box<Node> = {
    Comparison,
    <l: Logical> <op: LogicalOperator> <c: Comparison> => Box::from(Node::LogicalOperation(l, Box::from(op), c)),
}

Comparison: Box<Node> = {
    Term,
    <c: Comparison> <op: ComparisonOperator> <t: Term> => Box::from(Node::Comparison(c, Box::from(op), t)),
    <c: Comparison> <op: ReplaceOperator> <t1: Term> <t2: Term> => Box::from(Node::Replace(c, Box::from(op), t1, t2))
}

Term: Box<Node> = {
    Factor,
    <t: Term> <op: TermOperator> <f: Factor> => Box::from(Node::Term(t, Box::from(op), f)),
}

Factor: Box<Node> = {
    Unary,
    <f: Factor> <op: FactorOperator> <u: Unary> => Box::from(Node::Factor(f, Box::from(op), u)),
}

Unary: Box<Node> = {
    Cast,
    <op: UnaryOperator> <u: Unary> => Box::from(Node::Unary(Box::from(op), u)),
    "@" <u: Unary> => Box::from(Node::Unary(Box::from("@"), u)),
    "@@" <u: Unary> => Box::from(Node::Unary(Box::from("@@"), u)),
}

Cast: Box<Node> = {
    Item,
    <i: Item> CastOperator <t: Item> => Box::from(Node::Cast(i, t)),
}

Signature: Option<Vec<ParameterNode>> = {
    => None,
    "|" "|" Separator? => Some(vec![]),
    "|" <s: ParameterList> "|" Separator? => Some(s),
}

ParameterList: Vec<ParameterNode> = {
    Parameter => vec![<>],
    <mut l: ParameterList> Separator? <p: Parameter> => {l.push(p); l},
}

Parameter: ParameterNode = {
    <l: Label> <d: Default> => ParameterNode::Parameter(Box::from(l), None, d),
    <n: Label> Colon <t: Item> <d: Default> => ParameterNode::Parameter(Box::from(n), Some(t), d),
    "@" <l: Label> => ParameterNode::Unnamed(Box::from(l)),
    "@@" <l: Label> => ParameterNode::Named(Box::from(l)),
}

Default: Option<Node> = {
    => None,
    "=" <l: Logical> => Some(*l),
}

Item: Box<Node> = {
    Label => Node::parse_label(<>),
    <l: Regex> => Box::from(Node::Regex(Box::from(&l[3..l.len()-1]))),
    Field => Box::from(Node::Field(Box::from(<>))),
    <l:QuotedLabel> => Box::from(Node::Label(Box::from(&l[1..l.len()-1]))),
    QuotedString => Box::from(Node::String(Box::from(<>))),
    Integer => Box::from(Node::Integer(i128::from_str(<>.replace("_", "").as_str()).unwrap())),
    Float => Box::from(Node::Float(f64::from_str(<>.replace("_", "").as_str()).unwrap())),
    Flag => Box::from(Node::Assignment(Box::from(Node::Label(Box::from(&<>[2..]))), Box::from("="), Box::from(Node::Label(Box::from("true"))))),
    <i: Item> "[" <e: Assignment> "]" => Box::from(Node::GetItem(i, e)),
    <i: Item> Colon <l: AnyLabel> => Box::from(Node::GetAttr(i, l)),
    "{" Separator? <s: Signature> <l: JobListWithoutSeparator> "}" => Box::from(Node::Closure(s, l)),
    "(" <j:Job> ")" => Box::from(Node::Substitution(j)),
}

AnyLabel: String = {
    Label => Box::from(<>),
    <l: QuotedLabel> => Box::from(&l[1..l.len()-1]),
}

match {
    r"(and|or)" => LogicalOperator,
    "to" => CastOperator,
    r"(typeof|neg|not)" => UnaryOperator,
} else {
    ":" => Colon,
    r"( |\t)+" => {},
    r"#[^\n]*" => {},
    r"(>|<|>=|<=|==|!=|=~|!~)" => ComparisonOperator,
    r"(\*|//)" => FactorOperator,
    r"(~~|~)" => ReplaceOperator,
    r"(\+|-)" => TermOperator,
    r#""([^\\"]|\\.)*""# => QuotedString,
    r"([\._a-zA-Z%\?][\._0-9a-zA-Z%\?]*(/[\._0-9a-zA-Z%\?]+)*/?|/[\._0-9a-zA-Z%\?]+(/[\._0-9a-zA-Z%\?]+)*/?|/)" => Label,
    r"--[_0-9a-zA-Z]+" => Flag,
    r"\^[\._a-zA-Z][\._a-zA-Z0-9]*" => Field,
    r#"'([^\\']|\\.)*'"# => QuotedLabel,
    r#"re"([^"]|\\.)*""# => Regex,
    r"(;|\n)( |\t|;|\n|#[^\n]*)*" => Separator,
    r"[0-9][0-9_]*" => Integer,
    r"[0-9][0-9_]*\.[0-9_]+" => Float,
    _
}
