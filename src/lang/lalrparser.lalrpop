use std::str::FromStr;
use crate::lang::ast::*;
use crate::lang::command::Parameter;
use crate::lang::value::{ValueDefinition, Value, ValueType};

grammar;

pub JobList: JobListNode = {
  Separator? => JobListNode {jobs: Vec::new()},
  <l:NonEmptyJobList> Separator? => l,
};

NonEmptyJobList: JobListNode = {
  <mut l:NonEmptyJobList> Separator <j:Job> =>  {l.jobs.push(j); l},
  Job => JobListNode {jobs: vec![<>]},
};

Job: JobNode = {
    Command => JobNode{commands: vec![<>]},
    <mut j:Job> "|" Separator? <c:Command> => {j.commands.push(c); j}
};

Command: CommandNode = {
  Assignment => CommandNode{expressions: vec![*<>]},
  <mut c: Command> <a:Assignment> => {c.expressions.push(*a); c}
};

Assignment: Box<Node> = {
  Logical,
  <i: Item> "=" <e: Assignment> => Box::from(Node::Assignment(i, e)),
  <i: Item> ":=" <e: Assignment> => Box::from(Node::Declaration(i, e)),
}

Logical: Box<Node> = {
    Comparison,
    <l: Logical> <op: LogicalOperator> <c: Comparison> => Box::from(Node::LogicalOperation(l, Box::from(op), c)),
}

Comparison: Box<Node> = {
    Term,
    <c: Comparison> <op: ComparisonOperator> <t: Term> => Box::from(Node::Comparison(c, Box::from(op), t)),
    <c: Comparison> <op: ReplaceOperator> <t1: Term> <t2: Term> => Box::from(Node::Replace(c, Box::from(op), t1, t2))
}

Term: Box<Node> = {
    Factor,
    <t: Term> <op: TermOperator> <f: Factor> => Box::from(Node::Term(t, Box::from(op), f)),
}

Factor: Box<Node> = {
    Unary,
    <f: Factor> <op: FactorOperator> <u: Unary> => Box::from(Node::Factor(f, Box::from(op), u)),
}

Unary: Box<Node> = {
    Item,
    "!" <u: Unary> => Box::from(Node::Unary(Box::from("!"), u)),
    "@" <u: Unary> => Box::from(Node::Unary(Box::from("@"), u)),
    "@@" <u: Unary> => Box::from(Node::Unary(Box::from("@@"), u)),
}

Signature: Option<Vec<ParameterNode>> = {
    => None,
    "|" "|" => Some(vec![]),
    "|" <s: ParameterList> "|" => Some(s),
}

ParameterList: Vec<ParameterNode> = {
    Parameter => vec![<>],
    <mut l: ParameterList> Separator? <p: Parameter> => {l.push(p); l},
}

Parameter: ParameterNode = {
    <l: Label> <d: Default> => ParameterNode::Parameter(Box::from(l), ValueDefinition::Value(Value::Type(ValueType::Any)), d),
    <n: Label> ":" <t: Label> <d: Default> => ParameterNode::Parameter(Box::from(n), ValueDefinition::Label(Box::from(t)), d),
    "@" <l: Label> => ParameterNode::Unnamed(Box::from(l)),
    "@@" <l: Label> => ParameterNode::Named(Box::from(l)),
}

Default: Option<Node> = {
    => None,
    "=" <l: Logical> => Some(*l),
}

Item: Box<Node> = {
    Label => Box::from(Node::Label(Box::from(<>))),
    <l: Regex> => Box::from(Node::Regex(Box::from(&l[3..l.len()-1]))),
    Field => Box::from(Node::Field(Box::from(<>))),
    <g: Glob> => Box::from(Node::Glob(Box::from(&g[2..]))),
    QuotedLabel => Box::from(Node::Label(Box::from(<>))),
    QuotedString => Box::from(Node::String(Box::from(<>))),
    Integer => Box::from(Node::Integer(i128::from_str(<>.replace("_", "").as_str()).unwrap())),
    Float => Box::from(Node::Float(f64::from_str(<>.replace("_", "").as_str()).unwrap())),
    <i: Item> "[" <e: Assignment> "]" => Box::from(Node::GetItem(i, e)),
    <i: Item> ":" <l: Label> => Box::from(Node::GetAttr(i, Box::from(l))),
    <i: Item> "/" <l: Label> => Box::from(Node::Path(i, Box::from(l))),
    "{" <s: Signature> <l: NonEmptyJobList> "}" => Box::from(Node::Closure(s, l)),
    "(" <j:Job> ")" => Box::from(Node::Substitution(j)),
}

match {
    r"(and|or)" => LogicalOperator,
    r"as" => CastOperator,
} else {
    r"( |\t)+" => {},
    r"#[^\n]*" => {},
    r"(>|<|>=|<=|==|!=|=~|!~)" => ComparisonOperator,
    r"(\*|//)" => FactorOperator,
    r"(~~|~)" => ReplaceOperator,
    r"(\+|-)" => TermOperator,
    r#""([^\\"]|\\.)*""# => QuotedString,
    r"\*\*([^ \n]|\\.)*" => Glob,
    r"%[\._a-zA-Z][\._a-zA-Z0-9]*" => Field,
    r#"'([^\\']|\\.)*'"# => QuotedLabel,
    r#"re"([^"]|\\.)*""# => Regex,
    r"[\._a-zA-Z][\._a-zA-Z0-9]*" => Label,
    r"(;|\n)( |\t|;|\n|#[^\n]*)*" => Separator,
    r"[0-9][0-9_]*" => Integer,
    r"[0-9][0-9_]*\.[0-9_]+" => Float,
    _
}
